import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import CreatePost from "../components/organisms/CreatePost";
import Feed from "../components/organisms/Feed";
import { useOutletContext } from "react-router-dom";
import SearchBar from "../components/molecules/SearchBar";
import FeedNav from "../components/molecules/FeedNav";
import categories from "../data/categories.json"; // Adjust the path based on your file location

const HomePage = () => {
  const { handleNavigateToChat } = useOutletContext();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [search, setSearch] = useState("");
  const [selectedFilters, setSelectedFilters] = useState([]);
  const [selectedTab, setSelectedTab] = useState("most_recent");
  const [anonymousPost, setAnonymousPost] = useState("");
  const [selectedMood, setSelectedMood] = useState(null);

  const tagSuggestions = [
    { value: "stress", label: "Stress", icon: "üò£", count: 42 },
    { value: "mat-ngu", label: "M·∫•t ng·ªß", icon: "üåô", count: 30 },
    { value: "tram-cam", label: "Tr·∫ßm c·∫£m", icon: "üòî", count: 25 },
    { value: "lo-au", label: "Lo √¢u", icon: "üòü", count: 18 },
    { value: "tu-ky", label: "T·ª± k·ª∑", icon: "üß©", count: 10 },
    { value: "hoc-duong", label: "H·ªçc ƒë∆∞·ªùng", icon: "üéì", count: 15 },
  ];

  const quotes = [
    "Ngay c·∫£ trong ƒë√™m t·ªëi nh·∫•t, m·∫∑t trƒÉng v·∫´n t·ªèa s√°ng.",
    "M·ªói ng√†y l√† m·ªôt c∆° h·ªôi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.",
    "H√£y m·ªâm c∆∞·ªùi, v√¨ b·∫°n x·ª©ng ƒë√°ng v·ªõi ni·ªÅm vui.",
  ];

  const activities = [
    "U·ªëng m·ªôt c·ªëc n∆∞·ªõc",
    "ƒêi b·ªô 5 ph√∫t",
    "G·ª≠i tin nh·∫Øn cho m·ªôt ng∆∞·ªùi b·∫°n",
    "H√≠t th·ªü s√¢u 10 l·∫ßn",
    "Nghe m·ªôt b√†i h√°t y√™u th√≠ch",
  ];

  const moods = [
    { emoji: "üòä", label: "Vui", count: 12 },
    { emoji: "üò¢", label: "Bu·ªìn", count: 5 },
    { emoji: "üò¥", label: "M·ªát", count: 8 },
    { emoji: "üò°", label: "B·ª±c", count: 3 },
  ];

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const handleAnonymousSubmit = () => {
    if (anonymousPost.trim()) {
      alert("ƒê√£ g·ª≠i ·∫©n danh: " + anonymousPost);
      setAnonymousPost("");
    }
  };

  const toggleFilter = (filter) => {
    setSelectedFilters((prev) =>
      prev.includes(filter)
        ? prev.filter((item) => item !== filter)
        : [...prev, filter]
    );
  };

  const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
  const randomActivity = activities[Math.floor(Math.random() * activities.length)];

  return (
    <div className="flex h-screen flex-col md:flex-row">
      {/* Main content */}
      <div className="flex-1 space-y-4 overflow-y-auto scrollbar-none z-20 px-2">
        <div className="sticky top-0 z-30 bg-white/80 dark:bg-neutral-900/80 backdrop-blur-md pb-2 pt-2 mb-2 shadow-sm">
          {/* On mobile, FeedNav is above SearchBar */}
          {isMobile ? (
            <div className="flex flex-col gap-4">
              <FeedNav selected={selectedTab} onSelect={setSelectedTab} />
              <div className="w-full">
                <SearchBar
                  onSearch={(searchValue, filterValue) => {
                    setSearch(searchValue);
                    setSelectedFilters(filterValue ? [filterValue] : []);
                  }}
                  tags={tagSuggestions}
                  search={search}
                  setSearch={setSearch}
                  selectedFilter={selectedFilters}
                  setSelectedFilter={setSelectedFilters}
                />
              </div>
            </div>
          ) : (
            <div className="flex items-center gap-4">
              <FeedNav selected={selectedTab} onSelect={setSelectedTab} />
              <div className="flex-1 flex justify-end">
                <div className="w-full max-w-xs">
                  <SearchBar
                    onSearch={(searchValue, filterValue) => {
                      setSearch(searchValue);
                      setSelectedFilters(filterValue ? [filterValue] : []);
                    }}
                    tags={tagSuggestions}
                    search={search}
                    setSearch={setSearch}
                    selectedFilter={selectedFilters}
                    setSelectedFilter={setSelectedFilters}
                  />
                </div>
              </div>
            </div>
          )}
        </div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className={isMobile ? "flex justify-center" : ""}
        >
          <div className={isMobile ? "w-full max-w-md" : ""}>
            <CreatePost />
          </div>
        </motion.div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className={isMobile ? "flex justify-center" : ""}
        >
          <div className={isMobile ? "w-full max-w-md" : ""}>
            <Feed
              onNavigateToChat={handleNavigateToChat}
              search={search}
              filter={selectedFilters}
            />
          </div>
        </motion.div>
      </div>
      {/* Right section: Fixed width (320px), hidden on mobile, scrollable */}
      {!isMobile && (
        <div className="w-80 flex flex-col h-full p-4 dark:from-neutral-800 dark:to-neutral-900 overflow-y-auto scrollbar-none">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 mb-4 text-center"
          >
            <div className="flex items-center gap-2 mb-2 justify-center">
              <span className="text-2xl">üåü</span>
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                Quote h√¥m nay
              </h3>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-300 italic">
              "{randomQuote}"
            </p>
          </motion.div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 mb-4"
          >
            <div className="flex items-center gap-2 mb-2">
              <span className="text-2xl">üåø</span>
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                Th·ª≠ m·ªôt ƒëi·ªÅu nh·ªè ƒë·ªÉ c·∫£m th·∫•y t·ªët h∆°n
              </h3>
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-300">
              <p>‚úî {randomActivity}</p>
            </div>
          </motion.div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 mb-4"
          >
            <div className="flex items-center gap-2 mb-2">
              <span className="text-2xl">üìå</span>
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                L·ªçc theo ch·ªß ƒë·ªÅ
              </h3>
            </div>
            <div className="grid grid-cols-2 gap-2">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => toggleFilter(category.name)}
                  className={`flex items-center gap-2 p-2 rounded-xl dark:text-white text-sm ${selectedFilters.includes(category.name)
                    ? "bg-purple-100 dark:text-black"
                    : "bg-gray-50 dark:bg-gray-600 hover:bg-gray-100 dark:hover:bg-neutral-500"
                    } transition-colors`}
                >
                  <span>{category.icon}</span>
                  <span>{category.nameVi}</span>
                </button>
              ))}
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default HomePage;